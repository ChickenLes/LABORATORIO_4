
PRELAB4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000706  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064b  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b1  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038a  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  88:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
volatile uint8_t PC1ANTI = 0;  // Temporizador antirrebote para PC1

/////////////////////////////////////SETUP/////////////////////////////////
void setup() {
	//CONFIGURANDO OUTPUTS
	DDRD = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  94:	1b b8       	out	0x0b, r1	; 11
	
	//CONFIGURANDO INPUTS
	DDRC = 0x00;
  96:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
  98:	88 b9       	out	0x08, r24	; 8

	//CONFIGURACION PINCHANGE
	PCICR |= (1 << PCIE1);
  9a:	e8 e6       	ldi	r30, 0x68	; 104
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);
  a4:	ec e6       	ldi	r30, 0x6C	; 108
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	80 83       	st	Z, r24
	
	//CONFIGURACION TIMER0
	TCCR0A |= (1 << WGM01);				  //CTC
  ae:	84 b5       	in	r24, 0x24	; 36
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);  // PRESCALER 64
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;                          //1ms
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);              //INTERRUPCION POR COMPARACION
  be:	ee e6       	ldi	r30, 0x6E	; 110
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	80 83       	st	Z, r24
	
	
	sei(); 
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <__vector_4>:
}

//PIN CHANGE INTERRUPCION
ISR(PCINT1_vect) {
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
	if (!(PINC & (1 << PINC0))) {
  d8:	30 99       	sbic	0x06, 0	; 6
  da:	0c c0       	rjmp	.+24     	; 0xf4 <__vector_4+0x28>
		if (PC0ANTI == 0) {
  dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PC0ANTI>
  e0:	81 11       	cpse	r24, r1
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <__vector_4+0x28>
			CONTADOR1++;
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <CONTADOR1>
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <CONTADOR1>
			PC0ANTI = 200; //200ms 
  ee:	88 ec       	ldi	r24, 0xC8	; 200
  f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PC0ANTI>
		}
	}

	if (!(PINC & (1 << PINC1))) {
  f4:	31 99       	sbic	0x06, 1	; 6
  f6:	0c c0       	rjmp	.+24     	; 0x110 <__vector_4+0x44>
		if (PC1ANTI == 0) {
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	81 11       	cpse	r24, r1
  fe:	08 c0       	rjmp	.+16     	; 0x110 <__vector_4+0x44>
			CONTADOR1--;
 100:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <CONTADOR1>
 104:	81 50       	subi	r24, 0x01	; 1
 106:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <CONTADOR1>
			PC1ANTI = 200; //200ms 
 10a:	88 ec       	ldi	r24, 0xC8	; 200
 10c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__vector_14>:

//INTERRUPCION POR COMPARACION TIMER0
ISR(TIMER0_COMPA_vect) {
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
	if (PC0ANTI > 0) PC0ANTI--;
 128:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PC0ANTI>
 12c:	88 23       	and	r24, r24
 12e:	29 f0       	breq	.+10     	; 0x13a <__vector_14+0x1e>
 130:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PC0ANTI>
 134:	81 50       	subi	r24, 0x01	; 1
 136:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PC0ANTI>
	if (PC1ANTI > 0) PC1ANTI--;
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13e:	88 23       	and	r24, r24
 140:	29 f0       	breq	.+10     	; 0x14c <__vector_14+0x30>
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 146:	81 50       	subi	r24, 0x01	; 1
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <main>:

int main(void) {
	setup();
 158:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	while (1) {
		PORTD = CONTADOR1; 
 15c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <CONTADOR1>
 160:	8b b9       	out	0x0b, r24	; 11
 162:	fc cf       	rjmp	.-8      	; 0x15c <main+0x4>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
